---
title: "Real Estate R-Shiny Dashboard"
date: 10-10-2024 
author: Nathan Bresette 
categories: [Dashboard, Data Visualization, Maps, Interactive, R, R-Shiny]
image: "realestateimage.png"
output:
  html_document:
    df_print: paged
editor_options:
  chunk_output_type: inline
format:
  html:
    code-link: true
    code-fold: true
    code-overflow: wrap
    warning: false
---
Create and host a dashboard using R/R-Shiny!

Link to the dashboard: https://nathanbresette.shinyapps.io/real_estate/  

I’ve built countless dashboards using Tableau, PowerBI, Quicksight, and Qualtrics, but I’ve always wanted to create and host one from scratch. After learning how in my data visualization class, I decided to take the plunge!

This dashboard tells the story of real estate prices in New Taipei City, Taiwan, and it’s fully interactive—not just a static display of data.

**Key Features:**

**Pairwise Plots:** Using my custom R package, InquisitR, I generated detailed pairwise plots for easy exploration of variable relationships.

**Interactive Scatter Plots & Histograms:** Users can choose the third variable's color and select regression lines for scatterplots. The histogram allows manipulation of the number of bins.

**Leaflet Map:** An interactive map visualizes the geographical distribution of properties, revealing key insights into property prices across the city.

This experience opened up new possibilities in data storytelling and visualization. While many companies rely on drag-and-drop tools, using R offers complete control over the graphs—and best of all, it’s free! The data was very limited with only 7 variables but this was the foundational learning step!


# Dashboard Code:
```{r, eval=FALSE}
library(shiny)
library(tidyverse)
library(readxl)
library(leaflet)
library(DT)
library(GGally)
library(devtools)

# My package!!!
install_github("NathanBresette/InquisitR")
library(InquisitR)


library(tidyr) 

# Read the dataset
data <- read_excel("Real estate valuation data set 2.xlsx")

# Round numeric columns to three decimal places
rounded_data <- data %>%
  mutate(across(where(is.numeric), ~ round(.x, 3))) %>% 
  select(-`No`)
# UI
ui <- fluidPage(
  titlePanel("Real Estate Valuation Analysis"),
  
  # Remove sidebar layout
  mainPanel(
    tabsetPanel(
      id = "tab",
      tabPanel("Overview", 
               h4("Explore the dataset and its summary."),
               DTOutput("data_table")),
      tabPanel("Summary Statistics", 
               h4("View key summary statistics of the data."),
               DTOutput("summary_stats")),  # Changed to DTOutput for better presentation
      tabPanel("Pairwise Plot", 
               h4("Explore pairwise relationships between multiple variables."),
               plotOutput("pairwisePlot")),
      tabPanel("Map of Properties", 
               h4("View the geographical distribution of properties."),
               leafletOutput("propertyMap")),
      tabPanel("Distribution of House Prices", 
               h4("Explore the distribution of house prices per unit area."),
               sliderInput("bins", "Number of bins:", 
                           min = 5, max = 50, value = 30),  # Add slider to control bins
               plotOutput("priceDistributionPlot")),
      tabPanel("House Price vs. House Age", 
               h4("Analyze the relationship between house age and price."),
               radioButtons("smoothing_age", "Select Smoothing Method:",
                            choices = c("None" = "none", "Linear" = "lm", "LOESS" = "loess"),
                            selected = "loess"),
               selectInput("color_age", "Color by:", 
                           choices = c("None" = "none", colnames(rounded_data)),  # Include all column names
                           selected = "none"),
               plotOutput("priceAgePlot")),
      tabPanel("House Price vs. Distance to MRT Station", 
               h4("Investigate the effect of distance to MRT stations on house prices."),
               radioButtons("smoothing_distance", "Select Smoothing Method:",
                            choices = c("None" = "none", "Linear" = "lm", "LOESS" = "loess"),
                            selected = "loess"),
               selectInput("color_distance", "Color by:", 
                           choices = c("None" = "none", colnames(rounded_data)),  # Include all column names
                           selected = "none"),
               plotOutput("priceDistancePlot")),
      tabPanel("House Price vs. Convenience Stores", 
               h4("Examine how the number of convenience stores affects house prices."),
               plotOutput("priceConveniencePlot"))
    )
  )
)

server <- function(input, output) {
  
  # Overview Data Table
  output$data_table <- renderDT({
    datatable(rounded_data, options = list(pageLength = 5, autoWidth = TRUE))
  })
  
  # Summary Statistics
  output$summary_stats <- renderDT({
    summary_stats <- rounded_data %>%
      summarise(across(everything(), 
                       list(mean = ~round(mean(.x, na.rm = TRUE), 3),
                            median = ~round(median(.x, na.rm = TRUE), 3),
                            sd = ~round(sd(.x, na.rm = TRUE), 3),
                            min = ~round(min(.x, na.rm = TRUE), 3),
                            max = ~round(max(.x, na.rm = TRUE), 3)))) %>%
      pivot_longer(everything(), names_to = c(".value", "variable"), names_sep = "_") %>%
      rename(Variable = variable)
    
    datatable(summary_stats, options = list(pageLength = 5, autoWidth = TRUE))
  })
  
  # House Price vs. House Age
  output$priceAgePlot <- renderPlot({
    if (input$color_age == "none") {
      ggplot(rounded_data, aes(x = `X2 house age`, y = `Y house price of unit area`)) +
        geom_point(alpha = 0.5) +  # No color mapping
        labs(title = "House Price vs. House Age",
             x = "House Age (years)", y = "House Price of Unit Area") +
        {
          if (input$smoothing_age == "none") {
            NULL
          } else {
            geom_smooth(method = input$smoothing_age, se = FALSE, color = "red")
          }
        } +
        theme_minimal()
    } else {
      ggplot(rounded_data, aes(x = `X2 house age`, y = `Y house price of unit area`, color = .data[[input$color_age]])) +
        geom_point(alpha = 0.5) +
        scale_color_gradient(low = "blue", high = "red", na.value = "grey") +
        labs(title = "House Price vs. House Age",
             x = "House Age (years)", y = "House Price of Unit Area") +
        {
          if (input$smoothing_age == "none") {
            NULL
          } else {
            geom_smooth(method = input$smoothing_age, se = FALSE, color = "red")
          }
        } +
        theme_minimal()
    }
  })
  
  # House Price vs. Distance to MRT Station
  output$priceDistancePlot <- renderPlot({
    if (input$color_distance == "none") {
      ggplot(rounded_data, aes(x = `X3 distance to the nearest MRT station`, y = `Y house price of unit area`)) +
        geom_point(alpha = 0.5) +  # No color mapping
        labs(title = "House Price vs. Distance to MRT Station",
             x = "Distance to MRT Station (meters)", y = "House Price of Unit Area") +
        {
          if (input$smoothing_distance == "none") {
            NULL
          } else {
            geom_smooth(method = input$smoothing_distance, se = FALSE, color = "red")
          }
        } +
        theme_minimal()
    } else {
      ggplot(rounded_data, aes(x = `X3 distance to the nearest MRT station`, y = `Y house price of unit area`, color = .data[[input$color_distance]])) +
        geom_point(alpha = 0.5) +
        scale_color_gradient(low = "blue", high = "red", na.value = "grey") +
        labs(title = "House Price vs. Distance to MRT Station",
             x = "Distance to MRT Station (meters)", y = "House Price of Unit Area") +
        {
          if (input$smoothing_distance == "none") {
            NULL
          } else {
            geom_smooth(method = input$smoothing_distance, se = FALSE, color = "red")
          }
        } +
        theme_minimal()
    }
  })
  
  # House Price vs. Number of Convenience Stores
  output$priceConveniencePlot <- renderPlot({
    ggplot(rounded_data, aes(x = factor(`X4 number of convenience stores`), y = `Y house price of unit area`)) +
      geom_boxplot(fill = "orange", color = "black") +
      labs(title = "House Price vs. Number of Convenience Stores",
           x = "Number of Convenience Stores", y = "House Price of Unit Area") +
      theme_minimal()
  })
  
  # Distribution of House Prices
  output$priceDistributionPlot <- renderPlot({
    ggplot(rounded_data, aes(x = `Y house price of unit area`)) +
      geom_histogram(bins = input$bins, fill = "skyblue", color = "black") +  # Use input$bins
      labs(title = "Distribution of House Prices",
           x = "House Price of Unit Area", y = "Frequency") +
      theme_minimal()
  })
  
  # Leaflet map
  output$propertyMap <- renderLeaflet({
    leaflet(rounded_data) %>%
      addTiles() %>%
      addCircleMarkers(~`X6 longitude`, ~`X5 latitude`,
                       radius = 5, color = "blue", fillOpacity = 0.5,
                       popup = ~paste("Price per unit area:", `Y house price of unit area`)) %>%
      setView(lng = 121.54, lat = 24.98, zoom = 13)
  })
  
  # Pairwise Plot
  output$pairwisePlot <- renderPlot({
    correlationR(rounded_data)  
  })
}

# Run the app
shinyApp(ui = ui, server = server)
```

# Images of Dashboard
### Map of Taiwan:
```{r}
knitr::include_graphics("Taiwan_Map.png")
```

### Pairwise Plot (My package!!!)
```{r}
knitr::include_graphics("Pairwise_Shiny.png")
```

### Scatterplot 
```{r}
knitr::include_graphics("Scatterplot_Shiny.png")

```