---
title: "RgentAI: AI-Powered R Data Science Assistant"
date: 09-01-2025 
author: Nathan Bresette 
categories: [R Programming, AI/ML, Web Development, Data Science, Full-Stack]
image: "rgentlogo.png"

output:
  html_document:
    df_print: paged
editor_options:
  chunk_output_type: inline
format:
  html:
    code-link: true
    code-fold: true
    code-overflow: wrap
    warning: false
---

RgentAI is an intelligent AI assistant for RStudio that provides conversational chat, plot analysis, error debugging, and specialized agents.

[Official Website](https://rgentai.com)

[GitHub Repository](https://github.com/NathanBresette/Rgent-AI)


# Project Overview

RgentAI bridges the gap between general-purpose AI tools and specialized R data science workflows by providing deep integration with RStudio, real-time context capture, and purpose-built agents for common data science tasks. Unlike CLI-based AI tools, RgentAI can analyze your actual plots, inspect your live R environment, and execute code directly in your R console.

## Key Features

- **5 Specialized Data Science Agents**: Statistical analysis, machine learning modeling, data transformation, data cleaning, and visualization
- **Real-time Plot Analysis**: Automatically captures and analyzes plots from RStudio viewer pane
- **Environment Awareness**: Inspects live R environment including dataframes, variables, and objects
- **Direct Code Execution**: Executes generated R code directly in RStudio console
- **Conversation Memory**: Maintains context across sessions with intelligent indexing
- **Production-Ready**: User management, billing, security, and cloud infrastructure

# Architecture

## System Components

```mermaid
graph TB
    A[RStudio Addin] --> B[WebSocket Client]
    B --> C[Python FastAPI Backend]
    C --> D[PostgreSQL Database]
    C --> E[Claude AI API]
    C --> F[Response Cache]
    G[React Frontend] --> C
    H[Stripe Billing] --> C
```

# Backend

## FastAPI Server (`backend/main.py`)

The backend is built with Python FastAPI and handles all core functionality:

### Core Endpoints

- **`/chat`** - Main chat endpoint with conversation memory
- **`/chat/stream`** - Real-time streaming responses
- **`/context/capture`** - R environment context capture
- **`/plot/analyze`** - Plot analysis and interpretation
- **`/agent/execute`** - Specialized agent execution

### Key Features

```python
# Conversation memory with PostgreSQL indexing
@app.post("/chat", response_model=ChatResponse)
async def chat_with_ai(request: ChatRequest):
    conversation_id = request.conversation_id
    if request.new_conversation or not conversation_id:
        conversation_id = user_manager.start_conversation(request.access_code)
    
    # Enhanced prompt with context
    enhanced_prompt = build_enhanced_prompt(
        request.prompt, 
        request.context_data, 
        conversation_history
    )
```

### Smart Response Caching

```python
class SmartResponseCache:
    def __init__(self, max_cache_size: int = 500, cache_ttl_hours: int = 6):
        self.cache = {}
        self.context_summarizer = ContextSummarizer()
        
    def is_cacheable_question(self, prompt: str) -> bool:
        # Intelligent caching based on question type
        cacheable_patterns = [
            r"how\s+to\s+", r"what\s+is\s+", r"explain\s+",
            r"create\s+a\s+", r"plot\s+", r"visualize\s+"
        ]
```

## Database Schema (`backend/user_management_postgres.py`)

### Core Tables

```sql
-- Users and authentication
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    access_code VARCHAR(50) UNIQUE NOT NULL,
    stripe_customer_id VARCHAR(100),
    subscription_status VARCHAR(50) DEFAULT 'inactive',
    daily_limit INTEGER DEFAULT 1000,
    monthly_budget DECIMAL(10,2) DEFAULT 50.0
);

-- Conversation memory
CREATE TABLE contexts (
    id SERIAL PRIMARY KEY,
    access_code VARCHAR(50) NOT NULL,
    session_id VARCHAR(64) NOT NULL,
    context_data JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Usage tracking
CREATE TABLE usage_records (
    id SERIAL PRIMARY KEY,
    access_code VARCHAR(50) NOT NULL,
    request_type VARCHAR(50),
    tokens_used INTEGER,
    cost DECIMAL(10,4),
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

# Frontend

## RStudio Addin (`clean_package/R/websocket_addin.R`)

The R package provides seamless integration with RStudio:

### WebSocket Integration

```r
# Real-time communication with backend
ws <- websocket::WebSocket$new("wss://rgent.onrender.com/ws")
ws$onMessage(function(event) {
  response <- jsonlite::fromJSON(event$data)
  if (response$type == "code") {
    rstudioapi::sendToConsole(response$content)
  }
})
```

### Context Capture

```r
# Automatic environment capture
capture_context <- function() {
  list(
    dataframes = get_available_dataframes(),
    plots = get_active_plots(),
    variables = ls(globalenv()),
    working_directory = getwd(),
    loaded_packages = .packages()
  )
}
```

## React Web Interface (`payment-frontend/`)

### Key Components

- **Chat Interface** - Real-time messaging with streaming responses
- **Agent Selection** - Choose from 5 specialized data science agents
- **Plot Viewer** - Display and analyze R plots
- **Code Execution** - Send code directly to RStudio
- **User Dashboard** - Usage tracking and subscription management

### Installation Page

```html
<!-- Streamlined installation process -->
<div class="code-block">
  <code>devtools::install_github("NathanBresette/Rgent-AI", force = TRUE, upgrade = "never")</code>
</div>
```

# WebSocket Communication

## Real-time Data Flow

```mermaid
sequenceDiagram
    participant R as RStudio Addin
    participant WS as WebSocket
    participant B as Backend
    participant AI as Claude API
    
    R->>WS: Send chat message + context
    WS->>B: Process request
    B->>AI: Enhanced prompt with context
    AI-->>B: Streaming response
    B-->>WS: Stream chunks
    WS-->>R: Real-time updates
    R->>R: Execute generated code
```

## Message Types

- **`chat`** - Standard chat messages
- **`context`** - R environment data
- **`plot`** - Plot analysis requests
- **`agent`** - Specialized agent execution
- **`code`** - R code execution

# Specialized Agents

## 1. Statistical Analysis Agent (`clean_package/R/statistical_agent.R`)

Comprehensive statistical testing with intelligent test selection:

```r
start_statistical_analysis <- function(dataframe_name, analysis_options, variables, method_options) {
  # Automatic test selection based on data characteristics
  if (group_count == 2) {
    test_result <- perform_two_group_test(df, continuous_var, grouping_var)
  } else {
    test_result <- perform_anova_test(df, continuous_var, grouping_var)
  }
  
  # Effect size calculation
  effect_size <- calculate_cohens_d(group1_data, group2_data)
}
```

**Capabilities:**
- T-tests, ANOVA, Chi-squared tests
- Effect size calculations (Cohen's d, eta-squared)
- Power analysis and sample size calculations
- Multiple testing corrections
- Assumption checking and non-parametric alternatives

## 2. Machine Learning Agent (`clean_package/R/modeling_agent.R`)

Comprehensive ML workflows with model interpretability:

```r
execute_linear_regression <- function(df, target_variable, options, selected_variables) {
  # Feature importance calculation
  feature_importance <- data.frame(
    feature = names(coefficients),
    coefficient = coefficients,
    abs_coefficient = abs(coefficients)
  )
  
  # Residuals analysis
  residuals_analysis <- list(
    mean_residual = mean(resid(model)),
    normality_test = shapiro.test(resid(model))$p.value
  )
}
```

**Supported Algorithms:**
- Linear/Logistic/Multinomial Regression
- Random Forest with feature importance
- XGBoost with interpretability
- Dimensionality reduction (PCA, t-SNE, UMAP)
- Feature engineering and selection

## 3. Data Transformation Agent (`clean_package/R/transformation_agent.R`)

Intelligent data preprocessing and transformation:

```r
generate_transformation_step_code <- function(step_info, dataframe, method_options) {
  switch(step_info$operation,
    "mathematical_transformations" = {
      # Log, sqrt, power transformations based on skewness
      if (abs(skewness) > 1.5) {
        cat("SUGGESTION: Highly skewed - consider log/sqrt transformation\n")
      }
    },
    "categorical_transformations" = {
      # Dummy encoding, recoding, combining categories
    }
  )
}
```

**Transformation Types:**
- Mathematical (log, sqrt, power, polynomial)
- Categorical (dummy encoding, recoding, combining)
- DateTime (extracting components, time differences)
- Statistical (z-score, normalization, ranking)
- Text (case changes, pattern extraction)
- Spatial (coordinate transformations, distance calculations)

## 4. Data Cleaning Agent (`clean_package/R/agent.R`)

Automated data quality assessment and cleaning:

```r
execute_cleaning_agent <- function(dataframe, na_handling = "median", iteration = 1) {
  cleaning_steps <- list(
    list(operation = "examine_structure", code = paste0("str(", dataframe, ")")),
    list(operation = "analyze_summary", code = paste0("summary(", dataframe, ")")),
    list(operation = "handle_nas", code = generate_na_handling_code(dataframe, na_handling)),
    list(operation = "fix_data_types", code = generate_type_conversion_code(dataframe)),
    list(operation = "remove_outliers", code = generate_outlier_removal_code(dataframe))
  )
}
```

**Cleaning Operations:**
- Missing value analysis and imputation
- Data type detection and conversion
- Outlier detection (IQR, Z-score, Modified Z-score)
- Duplicate identification and removal
- Column naming standardization
- Custom cleaning operations

## 5. Visualization Agent

Plot analysis and intelligent visualization suggestions:

```r
# Plot analysis capabilities
analyze_plot <- function(plot_data) {
  # Extract plot characteristics
  plot_type <- detect_plot_type(plot_data)
  aesthetics <- extract_aesthetics(plot_data)
  
  # Provide intelligent suggestions
  suggestions <- generate_plot_suggestions(plot_type, aesthetics)
}
```

# Context Indexing & Memory

## Intelligent Context Capture (`backend/context_summarizer.py`)

```python
class ContextSummarizer:
    def summarize_context(self, context_data: dict) -> str:
        # Extract key information from R environment
        dataframes = context_data.get('dataframes', [])
        plots = context_data.get('plots', [])
        variables = context_data.get('variables', [])
        
        # Create concise summary for AI prompt
        summary = f"Dataframes: {', '.join(dataframes)}\n"
        summary += f"Active plots: {len(plots)}\n"
        summary += f"Variables: {len(variables)}"
        
        return summary
```

## Conversation Memory

- **PostgreSQL indexing** for fast context retrieval
- **Similarity matching** for relevant conversation history
- **Context summarization** to maintain prompt efficiency
- **Session management** with automatic cleanup

# Security & Production

## Security Features

```python
# Content Security Policy
csp_policy = (
    "default-src 'self'; "
    "script-src 'self' 'unsafe-inline' https://js.stripe.com; "
    "connect-src 'self' https://api.stripe.com https://rgent.onrender.com; "
    "upgrade-insecure-requests;"
)
```

## User Management

- **Access code authentication** (16-character alphanumeric)
- **Usage tracking** with daily/monthly limits
- **Subscription tiers** (Free Trial, Pro Haiku, Pro Sonnet)
- **Rate limiting** and cost controls
- **Stripe integration** for billing

## Cloud Infrastructure

- **Render.com deployment** with auto-scaling
- **PostgreSQL database** with connection pooling
- **HTTPS with Let's Encrypt** certificates
- **CDN integration** for static assets
- **Monitoring and logging** with error tracking

# Performance Optimizations

## Response Caching

```python
# Smart caching based on question type
def is_cacheable_question(self, prompt: str) -> bool:
    cacheable_patterns = [
        r"how\s+to\s+", r"what\s+is\s+", r"explain\s+",
        r"create\s+a\s+", r"plot\s+", r"visualize\s+"
    ]
    return any(re.search(pattern, prompt.lower()) for pattern in cacheable_patterns)
```

## Memory Management

- **Streaming responses** to reduce memory usage
- **Context summarization** to limit prompt size
- **Automatic cleanup** of old conversations
- **Efficient database queries** with proper indexing

# Installation & Usage

## Quick Start

```r
# Install from GitHub
devtools::install_github("NathanBresette/Rgent-AI", force = TRUE, upgrade = "never")

# Load the package
library(rstudioai)

# Launch the AI assistant
run_rgent()
```

## Web Interface

Visit [rgentai.com](https://rgentai.com) for:
- User dashboard and usage tracking
- Subscription management
- Installation instructions
- Documentation and examples

# Future Enhancements

## Planned Features

- **Custom agent creation** - Users can define their own specialized agents
- **Collaborative features** - Share agents and workflows with teams
- **Advanced visualization** - Interactive plot editing and manipulation
- **Model deployment** - Deploy trained models directly from RStudio
- **Integration expansion** - Support for Python, Julia, and other languages

## Technical Roadmap

- **Performance improvements** - Faster response times and better caching
- **Enhanced security** - Additional authentication methods and audit logging
- **Scalability** - Support for enterprise deployments and team management
- **API expansion** - Public API for third-party integrations

# Conclusion

RgentAI represents a significant advancement in AI-assisted data science by providing deep integration with RStudio and specialized workflows for common data science tasks. Unlike general-purpose AI tools, RgentAI understands the context of your R environment, can analyze your plots, and provides structured, executable solutions that integrate seamlessly into your existing workflow.

The combination of specialized agents, real-time context capture, and production-ready infrastructure makes RgentAI a powerful tool for both individual data scientists and teams looking to accelerate their R-based analytics workflows.

---

*For more information, visit [rgentai.com](https://rgentai.com) or check out the [GitHub repository](https://github.com/NathanBresette/Rgent-AI).*